{"ast":null,"code":"var _jsxFileName = \"/home/myxubuntuos/repos/CV-Generator/src/components/LeftSide/WorkExperience/Experience.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport JobEntry from './JobEntry';\nimport './Experience.css';\nimport ExperienceHeader from './ExperienceHeader';\nimport SegmentHeader from '../subHeader/segmentHeader';\nimport AddExperience from './AddExperience';\nimport { faToolbox } from '@fortawesome/free-solid-svg-icons';\nimport { jobsData } from '../sampleData/sampleData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Experience() {\n  _s();\n  const [jobs, setJobs] = useState(jobsData);\n  const [isVisible, setIsVisible] = useState(false);\n  const toggleVisibility = () => {\n    setIsVisible(!isVisible);\n  };\n  const handleFieldChange = (index, field, value) => {\n    const updatedJobs = jobs.map((job, idx) => {\n      if (idx === index) {\n        return {\n          ...job,\n          [field]: value\n        };\n      }\n      return job;\n    });\n    setJobs(updatedJobs);\n  };\n  const handleDateChange = (index, field, date) => {\n    const updatedJobs = jobs.map((job, idx) => {\n      if (idx === index) {\n        return {\n          ...job,\n          [field]: date\n        };\n      }\n      return job;\n    });\n    setJobs(updatedJobs);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Experience LHSInput\",\n    children: [/*#__PURE__*/_jsxDEV(SegmentHeader, {\n      icon: faToolbox,\n      headerText: \"Experience\",\n      toggle: toggleVisibility,\n      isVisible: isVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), isVisible && jobs.map((job, index) => /*#__PURE__*/_jsxDEV(ExperienceHeader, {\n      toggle: toggleVisibility,\n      headerText: job.jobTitle,\n      additionalClass: index === 0 ? 'firstItem' : ''\n    }, job.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this)\n    /* <JobEntry \n        key={job.id}\n        job={job}\n        isVisible={isVisible}\n        onChange={(field, value) => handleFieldChange(index, field, value)}\n        onDateChange={(field, date) => handleDateChange(index, field, date)}\n    /> */), /*#__PURE__*/_jsxDEV(AddExperience, {\n      headerText: \"Add Experience\",\n      toggle: toggleVisibility,\n      isVisible: isVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(Experience, \"pNngcpE1Wu3bHWnzsh3Er9u9ULA=\");\n_c = Experience;\nexport default Experience;\nvar _c;\n$RefreshReg$(_c, \"Experience\");","map":{"version":3,"names":["React","useState","JobEntry","ExperienceHeader","SegmentHeader","AddExperience","faToolbox","jobsData","jsxDEV","_jsxDEV","Experience","_s","jobs","setJobs","isVisible","setIsVisible","toggleVisibility","handleFieldChange","index","field","value","updatedJobs","map","job","idx","handleDateChange","date","className","children","icon","headerText","toggle","fileName","_jsxFileName","lineNumber","columnNumber","jobTitle","additionalClass","id","_c","$RefreshReg$"],"sources":["/home/myxubuntuos/repos/CV-Generator/src/components/LeftSide/WorkExperience/Experience.js"],"sourcesContent":["import React, { useState } from 'react';\nimport JobEntry from './JobEntry';\nimport './Experience.css'\nimport ExperienceHeader from './ExperienceHeader'\nimport SegmentHeader from '../subHeader/segmentHeader'; \nimport AddExperience from './AddExperience';\nimport { faToolbox } from '@fortawesome/free-solid-svg-icons';\nimport { jobsData } from '../sampleData/sampleData'; \n\nfunction Experience() {\n    const [jobs, setJobs] = useState(jobsData);\n    const [isVisible, setIsVisible] = useState(false);\n\n    const toggleVisibility = () => {\n        setIsVisible(!isVisible); \n    };\n\n    const handleFieldChange = (index, field, value) => {\n        const updatedJobs = jobs.map((job, idx) => {\n            if (idx === index) {\n                return {...job, [field]: value};\n            }\n            return job;\n        });\n        setJobs(updatedJobs);\n    };\n\n    const handleDateChange = (index, field, date) => {\n        const updatedJobs = jobs.map((job, idx) => {\n            if (idx === index) {\n                return {...job, [field]: date};\n            }\n            return job;\n        });\n        setJobs(updatedJobs);\n    };\n\n    return (\n        <div className=\"Experience LHSInput\">\n            <SegmentHeader icon={faToolbox} headerText=\"Experience\" toggle={toggleVisibility} isVisible = {isVisible} />\n            {isVisible && jobs.map((job, index) => (\n                <ExperienceHeader key = {job.id} toggle={toggleVisibility} headerText = {job.jobTitle} additionalClass = {index === 0 ? 'firstItem' : ''}/>\n                /* <JobEntry \n                    key={job.id}\n                    job={job}\n                    isVisible={isVisible}\n                    onChange={(field, value) => handleFieldChange(index, field, value)}\n                    onDateChange={(field, date) => handleDateChange(index, field, date)}\n                /> */\n            ))}\n            <AddExperience headerText = \"Add Experience\" toggle={toggleVisibility} isVisible = {isVisible}/>\n        </div>\n    );\n}\n\nexport default Experience;\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAO,kBAAkB;AACzB,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,SAASC,SAAS,QAAQ,mCAAmC;AAC7D,SAASC,QAAQ,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACM,QAAQ,CAAC;EAC1C,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;IAC3BD,YAAY,CAAC,CAACD,SAAS,CAAC;EAC5B,CAAC;EAED,MAAMG,iBAAiB,GAAGA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;IAC/C,MAAMC,WAAW,GAAGT,IAAI,CAACU,GAAG,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MACvC,IAAIA,GAAG,KAAKN,KAAK,EAAE;QACf,OAAO;UAAC,GAAGK,GAAG;UAAE,CAACJ,KAAK,GAAGC;QAAK,CAAC;MACnC;MACA,OAAOG,GAAG;IACd,CAAC,CAAC;IACFV,OAAO,CAACQ,WAAW,CAAC;EACxB,CAAC;EAED,MAAMI,gBAAgB,GAAGA,CAACP,KAAK,EAAEC,KAAK,EAAEO,IAAI,KAAK;IAC7C,MAAML,WAAW,GAAGT,IAAI,CAACU,GAAG,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MACvC,IAAIA,GAAG,KAAKN,KAAK,EAAE;QACf,OAAO;UAAC,GAAGK,GAAG;UAAE,CAACJ,KAAK,GAAGO;QAAI,CAAC;MAClC;MACA,OAAOH,GAAG;IACd,CAAC,CAAC;IACFV,OAAO,CAACQ,WAAW,CAAC;EACxB,CAAC;EAED,oBACIZ,OAAA;IAAKkB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,gBAChCnB,OAAA,CAACL,aAAa;MAACyB,IAAI,EAAEvB,SAAU;MAACwB,UAAU,EAAC,YAAY;MAACC,MAAM,EAAEf,gBAAiB;MAACF,SAAS,EAAIA;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC3GrB,SAAS,IAAIF,IAAI,CAACU,GAAG,CAAC,CAACC,GAAG,EAAEL,KAAK,kBAC9BT,OAAA,CAACN,gBAAgB;MAAgB4B,MAAM,EAAEf,gBAAiB;MAACc,UAAU,EAAIP,GAAG,CAACa,QAAS;MAACC,eAAe,EAAInB,KAAK,KAAK,CAAC,GAAG,WAAW,GAAG;IAAG,GAAhHK,GAAG,CAACe,EAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2G;IAC1I;AAChB;AACA;AACA;AACA;AACA;AACA,SACa,CAAC,eACF1B,OAAA,CAACJ,aAAa;MAACyB,UAAU,EAAG,gBAAgB;MAACC,MAAM,EAAEf,gBAAiB;MAACF,SAAS,EAAIA;IAAU;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/F,CAAC;AAEd;AAACxB,EAAA,CA5CQD,UAAU;AAAA6B,EAAA,GAAV7B,UAAU;AA8CnB,eAAeA,UAAU;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}